"""Fitbit Web API Explorer

Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator


class GetSleepLogListResponsePagination(BaseModel):
    """GetSleepLogListResponsePagination"""

    after_date: date | None = Field(
        default=None,
        description="The specified afterDate parameter.",
        alias="afterDate",
    )
    before_date: date | None = Field(
        default=None,
        description="The specified beforeDate parameter.",
        alias="beforeDate",
    )
    limit: StrictInt | None = Field(default=None, description="The specified limit.")
    next: StrictStr | None = Field(
        default=None, description="URL for the next page of results."
    )
    offset: StrictInt | None = Field(default=None, description="The specified offset.")
    previous: StrictStr | None = Field(
        default=None, description="URL for the previous page of results."
    )
    sort: StrictStr | None = Field(
        default=None, description="The specified sort order."
    )
    __properties: ClassVar[list[str]] = [
        "afterDate",
        "beforeDate",
        "limit",
        "next",
        "offset",
        "previous",
        "sort",
    ]

    @field_validator("sort")
    def sort_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in {"asc", "desc"}:
            raise ValueError("must be one of enum values ('asc', 'desc')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of GetSleepLogListResponsePagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of GetSleepLogListResponsePagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "afterDate": obj.get("afterDate"),
                "beforeDate": obj.get("beforeDate"),
                "limit": obj.get("limit"),
                "next": obj.get("next"),
                "offset": obj.get("offset"),
                "previous": obj.get("previous"),
                "sort": obj.get("sort"),
            }
        )
        return _obj
