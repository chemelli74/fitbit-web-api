"""Fitbit Web API Explorer

Fitbit provides a Web API for accessing data from Fitbit activity trackers, Aria scale, and manually entered logs. Anyone can develop an application to access and modify a Fitbit user's data on their behalf, so long as it complies with Fitbit Platform Terms of Service. These Swagger UI docs do not currently support making Fitbit API requests directly. In order to make a request, construct a request for the appropriate endpoint using this documentation, and then add an Authorization header to each request with an access token obtained using the steps outlined here: https://dev.fitbit.com/build/reference/web-api/developer-guide/authorization/.

The version of the OpenAPI document: 1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Any, ClassVar, Self

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)

from fitbit_web_api.models.badge import Badge
from fitbit_web_api.models.user_features import UserFeatures


class User(BaseModel):
    """User"""

    age: StrictInt | None = None
    ambassador: StrictBool | None = None
    auto_stride_enabled: StrictBool | None = Field(
        default=None, alias="autoStrideEnabled"
    )
    avatar: StrictStr | None = None
    avatar150: StrictStr | None = None
    avatar640: StrictStr | None = None
    average_daily_steps: StrictInt | None = Field(
        default=None, alias="averageDailySteps"
    )
    challenges_beta: StrictBool | None = Field(default=None, alias="challengesBeta")
    clock_time_display_format: StrictStr | None = Field(
        default=None, alias="clockTimeDisplayFormat"
    )
    corporate: StrictBool | None = None
    corporate_admin: StrictBool | None = Field(default=None, alias="corporateAdmin")
    country: StrictStr | None = None
    date_of_birth: date | None = Field(default=None, alias="dateOfBirth")
    display_name: StrictStr | None = Field(default=None, alias="displayName")
    display_name_setting: StrictStr | None = Field(
        default=None, alias="displayNameSetting"
    )
    distance_unit: StrictStr | None = Field(default=None, alias="distanceUnit")
    encoded_id: StrictStr | None = Field(default=None, alias="encodedId")
    features: UserFeatures | None = None
    first_name: StrictStr | None = Field(default=None, alias="firstName")
    foods_locale: StrictStr | None = Field(default=None, alias="foodsLocale")
    full_name: StrictStr | None = Field(default=None, alias="fullName")
    gender: StrictStr | None = None
    glucose_unit: StrictStr | None = Field(default=None, alias="glucoseUnit")
    height: StrictFloat | StrictInt | None = None
    height_unit: StrictStr | None = Field(default=None, alias="heightUnit")
    is_bug_report_enabled: StrictBool | None = Field(
        default=None, alias="isBugReportEnabled"
    )
    is_child: StrictBool | None = Field(default=None, alias="isChild")
    is_coach: StrictBool | None = Field(default=None, alias="isCoach")
    language_locale: StrictStr | None = Field(default=None, alias="languageLocale")
    last_name: StrictStr | None = Field(default=None, alias="lastName")
    legal_terms_accept_required: StrictBool | None = Field(
        default=None, alias="legalTermsAcceptRequired"
    )
    locale: StrictStr | None = None
    member_since: date | None = Field(default=None, alias="memberSince")
    mfa_enabled: StrictBool | None = Field(default=None, alias="mfaEnabled")
    offset_from_utc_millis: StrictInt | None = Field(
        default=None, alias="offsetFromUTCMillis"
    )
    sdk_developer: StrictBool | None = Field(default=None, alias="sdkDeveloper")
    sleep_tracking: StrictStr | None = Field(default=None, alias="sleepTracking")
    start_day_of_week: StrictStr | None = Field(default=None, alias="startDayOfWeek")
    stride_length_running: StrictFloat | StrictInt | None = Field(
        default=None, alias="strideLengthRunning"
    )
    stride_length_running_type: StrictStr | None = Field(
        default=None, alias="strideLengthRunningType"
    )
    stride_length_walking: StrictFloat | StrictInt | None = Field(
        default=None, alias="strideLengthWalking"
    )
    stride_length_walking_type: StrictStr | None = Field(
        default=None, alias="strideLengthWalkingType"
    )
    swim_unit: StrictStr | None = Field(default=None, alias="swimUnit")
    timezone: StrictStr | None = None
    top_badges: list[Badge] | None = Field(default=None, alias="topBadges")
    water_unit: StrictStr | None = Field(default=None, alias="waterUnit")
    water_unit_name: StrictStr | None = Field(default=None, alias="waterUnitName")
    weight: StrictFloat | StrictInt | None = None
    weight_unit: StrictStr | None = Field(default=None, alias="weightUnit")
    __properties: ClassVar[list[str]] = [
        "age",
        "ambassador",
        "autoStrideEnabled",
        "avatar",
        "avatar150",
        "avatar640",
        "averageDailySteps",
        "challengesBeta",
        "clockTimeDisplayFormat",
        "corporate",
        "corporateAdmin",
        "country",
        "dateOfBirth",
        "displayName",
        "displayNameSetting",
        "distanceUnit",
        "encodedId",
        "features",
        "firstName",
        "foodsLocale",
        "fullName",
        "gender",
        "glucoseUnit",
        "height",
        "heightUnit",
        "isBugReportEnabled",
        "isChild",
        "isCoach",
        "languageLocale",
        "lastName",
        "legalTermsAcceptRequired",
        "locale",
        "memberSince",
        "mfaEnabled",
        "offsetFromUTCMillis",
        "sdkDeveloper",
        "sleepTracking",
        "startDayOfWeek",
        "strideLengthRunning",
        "strideLengthRunningType",
        "strideLengthWalking",
        "strideLengthWalkingType",
        "swimUnit",
        "timezone",
        "topBadges",
        "waterUnit",
        "waterUnitName",
        "weight",
        "weightUnit",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict["features"] = self.features.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in top_badges (list)
        _items = []
        if self.top_badges:
            for _item_top_badges in self.top_badges:
                if _item_top_badges:
                    _items.append(_item_top_badges.to_dict())
            _dict["topBadges"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "age": obj.get("age"),
                "ambassador": obj.get("ambassador"),
                "autoStrideEnabled": obj.get("autoStrideEnabled"),
                "avatar": obj.get("avatar"),
                "avatar150": obj.get("avatar150"),
                "avatar640": obj.get("avatar640"),
                "averageDailySteps": obj.get("averageDailySteps"),
                "challengesBeta": obj.get("challengesBeta"),
                "clockTimeDisplayFormat": obj.get("clockTimeDisplayFormat"),
                "corporate": obj.get("corporate"),
                "corporateAdmin": obj.get("corporateAdmin"),
                "country": obj.get("country"),
                "dateOfBirth": obj.get("dateOfBirth"),
                "displayName": obj.get("displayName"),
                "displayNameSetting": obj.get("displayNameSetting"),
                "distanceUnit": obj.get("distanceUnit"),
                "encodedId": obj.get("encodedId"),
                "features": (
                    UserFeatures.from_dict(obj["features"])
                    if obj.get("features") is not None
                    else None
                ),
                "firstName": obj.get("firstName"),
                "foodsLocale": obj.get("foodsLocale"),
                "fullName": obj.get("fullName"),
                "gender": obj.get("gender"),
                "glucoseUnit": obj.get("glucoseUnit"),
                "height": obj.get("height"),
                "heightUnit": obj.get("heightUnit"),
                "isBugReportEnabled": obj.get("isBugReportEnabled"),
                "isChild": obj.get("isChild"),
                "isCoach": obj.get("isCoach"),
                "languageLocale": obj.get("languageLocale"),
                "lastName": obj.get("lastName"),
                "legalTermsAcceptRequired": obj.get("legalTermsAcceptRequired"),
                "locale": obj.get("locale"),
                "memberSince": obj.get("memberSince"),
                "mfaEnabled": obj.get("mfaEnabled"),
                "offsetFromUTCMillis": obj.get("offsetFromUTCMillis"),
                "sdkDeveloper": obj.get("sdkDeveloper"),
                "sleepTracking": obj.get("sleepTracking"),
                "startDayOfWeek": obj.get("startDayOfWeek"),
                "strideLengthRunning": obj.get("strideLengthRunning"),
                "strideLengthRunningType": obj.get("strideLengthRunningType"),
                "strideLengthWalking": obj.get("strideLengthWalking"),
                "strideLengthWalkingType": obj.get("strideLengthWalkingType"),
                "swimUnit": obj.get("swimUnit"),
                "timezone": obj.get("timezone"),
                "topBadges": (
                    [Badge.from_dict(_item) for _item in obj["topBadges"]]
                    if obj.get("topBadges") is not None
                    else None
                ),
                "waterUnit": obj.get("waterUnit"),
                "waterUnitName": obj.get("waterUnitName"),
                "weight": obj.get("weight"),
                "weightUnit": obj.get("weightUnit"),
            }
        )
        return _obj
